var atpl = require('../src/preCompile.js'),
    beautify = require('js-beautify').js_beautify,
    homunculus = require('homunculus');

function removeByteOrderMark(text) {
    if (text.charCodeAt(0) === 0xfeff) {
        return text.substring(1);
    }
    return text;
}

// wrap templates
function wrap(openedFile) {

    var finalFunc,
        data = JSON.parse(atpl(openedFile)),
        context = homunculus.getContext('js').parse('function anima(){' +data.formatTpl+ '}').getChildren()[0],
        vars = context.getVars(),
        vids = context.getVids(),
        hash = {out: true},
        args = [],
        realArgs = '',
        formalArgs = '';

    vars.forEach(function(vardecl) {
        var v = vardecl.first().token().content();
        hash[v] = true;
    });

    vids.forEach(function(vid) {
        var v = vid.token().content();
        if(hash[v]) {
            return;
        }
        hash[v] = true;
        args.push(v);
    });

    try {
        new Function(args, data.formatTpl);
    } catch (e) {
        if (typeof console !== 'undefined') console.log("Could not create a template function: " + data.code);
        throw e;
    }

    if(args.length){
        realArgs = ('anima.' + args.join(',anima.'));
        formalArgs = args.join(',');
    }

    finalFunc = beautify('module.exports = function(anima){return (function('+formalArgs+'){'+data.formatTpl+'})('+realArgs+')};', { indent_size: 2 });

    return finalFunc;
}

// get the result
function transformer(str){
    return wrap(removeByteOrderMark(str).trim());
}

module.exports = transformer;
