#!/usr/bin/env node

// dependencies
var path = require('path'),
    nopt = require('nopt'),
    mkderp = require('mkdirp'),
    fs = require('fs');

var transformer = require('./transformer');

module.exports = transformer;

// locals
var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'],
    specialsRegExp = new RegExp('(\\' + specials.join('|\\') + ')', 'g'),
    options = {
        'outputdir': path,
        'version': Boolean,
        'help': Boolean
    },
    shortHand = {
        'o': ['--outputdir'],
        'h': ['--help'],
        'v': ['--version']
    },
    templates;

// options
options = nopt(options, shortHand);

options.outputdir || (options.outputdir = path.dirname(options.argv.remain[0]) + '/build')

// escape special regexp characters
function esc(text) {
    return text.replace(specialsRegExp, '\\$1');
}

// cyan function for rob
function cyan(text) {
    return '\033[36m' + text + '\033[39m';
}

// check for dirs and correct ext (<3 for windows)
function extractFiles(args) {
    var usage = '\n' +
        cyan('USAGE:') + '   atpl [--outputdir outputdir] [--watch boolean] [--publish boolean] FILES\n\n' +
        cyan('OPTIONS:\n\n') +
        '   [-o, --outputdir] :: outputs the templates as individual files to a directory\n\n' +
        '   [-h, --help] :: outputs the help doc\n\n' +
        '   [-v, --version] :: outputs the version number\n\n' +
        cyan('EXAMPLE:') + '   atpl ./templates/*.atpl\n\n' +
        cyan('NOTE:') + '   atpl supports the "*" wildcard and allows you to target specific extensions too\n',
        files = [];

    if (options.version) {
        console.log(require('../package.json').version);
        process.exit(0);
    }

    if (!args.length || options.help) {
        console.log(usage);
        process.exit(0);
    }

    args.forEach(function(arg) {

        if (/\*/.test(arg)) {
            arg = arg.split('*');
            return files = files.concat(
                fs.readdirSync(arg[0] || '.')
                .map(function(f) {
                    var file = path.join(arg[0], f);
                    return new RegExp(esc(arg[1]) + '$').test(f) && fs.statSync(file).isFile() && file;
                })
                .filter(function(f) {
                    return f;
                })
            );
        }

        if (fs.statSync(arg).isFile()) files.push(arg);

    })

    return files;
}

// write the directory
mkderp.sync(options.outputdir);

// write a template foreach file that matches template extension
function compile(){
    return extractFiles(options.argv.remain)
        .map(function(file) {
            var openedFile = fs.readFileSync(file, 'utf-8'),
                name;
            if (!openedFile) return;
            name = path.basename(file).replace(/\..*$/, '');
            openedFile = transformer(openedFile);
            fs.writeFileSync(path.join(options.outputdir, name + '.js'), openedFile);
        })
        .filter(function(t) {
            return t;
        });
}

templates = compile();

if (!templates.length || options.outputdir) {
    process.exit(0);
}

module.exports = transformer;
